// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory-service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReserveProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveProductRequestMultiError, or nil if none found.
func (m *ReserveProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := ReserveProductRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() <= 0 {
		err := ReserveProductRequestValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReserveProductRequestMultiError(errors)
	}

	return nil
}

// ReserveProductRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveProductRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveProductRequestMultiError) AllErrors() []error { return m }

// ReserveProductRequestValidationError is the validation error returned by
// ReserveProductRequest.Validate if the designated constraints aren't met.
type ReserveProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveProductRequestValidationError) ErrorName() string {
	return "ReserveProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveProductRequestValidationError{}

// Validate checks the field values on ReserveProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveProductResponseMultiError, or nil if none found.
func (m *ReserveProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ReserveProductResponseMultiError(errors)
	}

	return nil
}

// ReserveProductResponseMultiError is an error wrapping multiple validation
// errors returned by ReserveProductResponse.ValidateAll() if the designated
// constraints aren't met.
type ReserveProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveProductResponseMultiError) AllErrors() []error { return m }

// ReserveProductResponseValidationError is the validation error returned by
// ReserveProductResponse.Validate if the designated constraints aren't met.
type ReserveProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveProductResponseValidationError) ErrorName() string {
	return "ReserveProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveProductResponseValidationError{}

// Validate checks the field values on CompensateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateProductRequestMultiError, or nil if none found.
func (m *CompensateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := CompensateProductRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() <= 0 {
		err := CompensateProductRequestValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompensateProductRequestMultiError(errors)
	}

	return nil
}

// CompensateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CompensateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CompensateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateProductRequestMultiError) AllErrors() []error { return m }

// CompensateProductRequestValidationError is the validation error returned by
// CompensateProductRequest.Validate if the designated constraints aren't met.
type CompensateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateProductRequestValidationError) ErrorName() string {
	return "CompensateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateProductRequestValidationError{}

// Validate checks the field values on CompensateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateProductResponseMultiError, or nil if none found.
func (m *CompensateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CompensateProductResponseMultiError(errors)
	}

	return nil
}

// CompensateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CompensateProductResponse.ValidateAll() if the
// designated constraints aren't met.
type CompensateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateProductResponseMultiError) AllErrors() []error { return m }

// CompensateProductResponseValidationError is the validation error returned by
// CompensateProductResponse.Validate if the designated constraints aren't met.
type CompensateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateProductResponseValidationError) ErrorName() string {
	return "CompensateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateProductResponseValidationError{}
