// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory-service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReserveItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveItemRequestMultiError, or nil if none found.
func (m *ReserveItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := ReserveItemRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() <= 0 {
		err := ReserveItemRequestValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReserveItemRequestMultiError(errors)
	}

	return nil
}

// ReserveItemRequestMultiError is an error wrapping multiple validation errors
// returned by ReserveItemRequest.ValidateAll() if the designated constraints
// aren't met.
type ReserveItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveItemRequestMultiError) AllErrors() []error { return m }

// ReserveItemRequestValidationError is the validation error returned by
// ReserveItemRequest.Validate if the designated constraints aren't met.
type ReserveItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveItemRequestValidationError) ErrorName() string {
	return "ReserveItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveItemRequestValidationError{}

// Validate checks the field values on ReserveItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveItemResponseMultiError, or nil if none found.
func (m *ReserveItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ReserveItemResponseMultiError(errors)
	}

	return nil
}

// ReserveItemResponseMultiError is an error wrapping multiple validation
// errors returned by ReserveItemResponse.ValidateAll() if the designated
// constraints aren't met.
type ReserveItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveItemResponseMultiError) AllErrors() []error { return m }

// ReserveItemResponseValidationError is the validation error returned by
// ReserveItemResponse.Validate if the designated constraints aren't met.
type ReserveItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveItemResponseValidationError) ErrorName() string {
	return "ReserveItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveItemResponseValidationError{}

// Validate checks the field values on CompensateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateItemRequestMultiError, or nil if none found.
func (m *CompensateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := CompensateItemRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() <= 0 {
		err := CompensateItemRequestValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompensateItemRequestMultiError(errors)
	}

	return nil
}

// CompensateItemRequestMultiError is an error wrapping multiple validation
// errors returned by CompensateItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CompensateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateItemRequestMultiError) AllErrors() []error { return m }

// CompensateItemRequestValidationError is the validation error returned by
// CompensateItemRequest.Validate if the designated constraints aren't met.
type CompensateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateItemRequestValidationError) ErrorName() string {
	return "CompensateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateItemRequestValidationError{}

// Validate checks the field values on CompensateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateItemResponseMultiError, or nil if none found.
func (m *CompensateItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CompensateItemResponseMultiError(errors)
	}

	return nil
}

// CompensateItemResponseMultiError is an error wrapping multiple validation
// errors returned by CompensateItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CompensateItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateItemResponseMultiError) AllErrors() []error { return m }

// CompensateItemResponseValidationError is the validation error returned by
// CompensateItemResponse.Validate if the designated constraints aren't met.
type CompensateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateItemResponseValidationError) ErrorName() string {
	return "CompensateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateItemResponseValidationError{}
